// Mocks generated by Mockito 5.2.0 from annotations
// in product_list/test/app/modules/products/mock_products_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:product_list/app/modules/products/domain/entities/product.dart'
    as _i4;
import 'package:product_list/app/modules/products/infra/models/product_model.dart'
    as _i5;

import 'mock_products_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamSubscription_0<T> extends _i1.Fake
    implements _i2.StreamSubscription<T> {}

/// A class which mocks [ProductRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepositoryTest extends _i1.Mock
    implements _i3.ProductRepositoryTest {
  MockProductRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<List<_i4.Product>> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue: Stream<List<_i4.Product>>.empty())
          as _i2.Stream<List<_i4.Product>>);
  @override
  _i2.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteProduct, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateProduct(_i4.Product? product) =>
      (super.noSuchMethod(Invocation.method(#updateProduct, [product]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
}

/// A class which mocks [StreamProductsTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamProductsTest extends _i1.Mock
    implements _i3.StreamProductsTest {
  MockStreamProductsTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i2.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i2.Future<int>);
  @override
  _i2.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<List<_i5.ProductModel>> get first =>
      (super.noSuchMethod(Invocation.getter(#first),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> get last =>
      (super.noSuchMethod(Invocation.getter(#last),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> get single =>
      (super.noSuchMethod(Invocation.getter(#single),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> asBroadcastStream(
          {void Function(_i2.StreamSubscription<List<_i5.ProductModel>>)?
              onListen,
          void Function(_i2.StreamSubscription<List<_i5.ProductModel>>)?
              onCancel}) =>
      (super.noSuchMethod(
              Invocation.method(#asBroadcastStream, [],
                  {#onListen: onListen, #onCancel: onCancel}),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.StreamSubscription<List<_i5.ProductModel>> listen(
          void Function(List<_i5.ProductModel>)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_0<List<_i5.ProductModel>>())
          as _i2.StreamSubscription<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> where(
          bool Function(List<_i5.ProductModel>)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<S> map<S>(S Function(List<_i5.ProductModel>)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Stream<E> asyncMap<E>(
          _i2.FutureOr<E> Function(List<_i5.ProductModel>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i2.Stream<E>);
  @override
  _i2.Stream<E> asyncExpand<E>(
          _i2.Stream<E>? Function(List<_i5.ProductModel>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i2.Stream<E>);
  @override
  _i2.Stream<List<_i5.ProductModel>> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#handleError, [onError], {#test: test}),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<S> expand<S>(
          Iterable<S> Function(List<_i5.ProductModel>)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Future<dynamic> pipe(
          _i2.StreamConsumer<List<_i5.ProductModel>>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Stream<S> transform<S>(
          _i2.StreamTransformer<List<_i5.ProductModel>, S>?
              streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i2.Stream<S>);
  @override
  _i2.Future<List<_i5.ProductModel>> reduce(
          List<_i5.ProductModel> Function(
                  List<_i5.ProductModel>, List<_i5.ProductModel>)?
              combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<S> fold<S>(
          S? initialValue, S Function(S, List<_i5.ProductModel>)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i2.Future<S>);
  @override
  _i2.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<dynamic> forEach(void Function(List<_i5.ProductModel>)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<bool> every(bool Function(List<_i5.ProductModel>)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Future<bool> any(bool Function(List<_i5.ProductModel>)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  _i2.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i2.Stream<R>);
  @override
  _i2.Future<List<List<_i5.ProductModel>>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
              returnValue: Future<List<List<_i5.ProductModel>>>.value(
                  <List<_i5.ProductModel>>[]))
          as _i2.Future<List<List<_i5.ProductModel>>>);
  @override
  _i2.Future<Set<List<_i5.ProductModel>>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
              returnValue: Future<Set<List<_i5.ProductModel>>>.value(
                  <List<_i5.ProductModel>>{}))
          as _i2.Future<Set<List<_i5.ProductModel>>>);
  @override
  _i2.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i2.Future<E>);
  @override
  _i2.Stream<List<_i5.ProductModel>> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> takeWhile(
          bool Function(List<_i5.ProductModel>)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> skipWhile(
          bool Function(List<_i5.ProductModel>)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> distinct(
          [bool Function(List<_i5.ProductModel>, List<_i5.ProductModel>)?
              equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> firstWhere(
          bool Function(List<_i5.ProductModel>)? test,
          {List<_i5.ProductModel> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> lastWhere(
          bool Function(List<_i5.ProductModel>)? test,
          {List<_i5.ProductModel> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> singleWhere(
          bool Function(List<_i5.ProductModel>)? test,
          {List<_i5.ProductModel> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Future<List<_i5.ProductModel>> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
              returnValue:
                  Future<List<_i5.ProductModel>>.value(<_i5.ProductModel>[]))
          as _i2.Future<List<_i5.ProductModel>>);
  @override
  _i2.Stream<List<_i5.ProductModel>> timeout(Duration? timeLimit,
          {void Function(_i2.EventSink<List<_i5.ProductModel>>)? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
}

/// A class which mocks [ProductDatasourceTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductDatasourceTest extends _i1.Mock
    implements _i3.ProductDatasourceTest {
  MockProductDatasourceTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<List<_i5.ProductModel>> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue: Stream<List<_i5.ProductModel>>.empty())
          as _i2.Stream<List<_i5.ProductModel>>);
  @override
  _i2.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteProduct, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateProduct(_i5.ProductModel? product) =>
      (super.noSuchMethod(Invocation.method(#updateProduct, [product]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
}
